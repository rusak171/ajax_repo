[
    {
        "firstName": "Brett",
        "lastName": "McLaughlin",
        "email": "brett@newInstance.com",
        "text": "Здесь тоже нет ничего особо сложного. Мы просто получили одну переменную people, а ее значением является массив, содержащий три элемента, каждый из которых – запись о человеке, в которой указаны его имя, фамилия и адрес электронной почты."
    }, {
        "firstName": "Jason",
        "lastName": "Hunter",
        "email": "jason@servlets.com",
        "text": "Этот пример иллюстрирует, как можно объединять записи вместе и как с помощью фигурных скобок можно группировать элементы в одно целое. Конечно, мы можем использовать такой же синтаксис и для описания структуры данных, в которой каждый элемент сам является списком"
    }, {
        "firstName": "Elliotte",
        "lastName": "Harold",
        "email": "elharo@macfaq.com",
        "text": "Из примера хорошо видно, что можно создавать структуры данных, в которой каждый элемент основного списка также является списком. Ещё следует отметить, что ключи в парах «имя/значение» различны для каждого элемента основного списка (ключи пар в programmers отличаются от ключей для authors, которые в свою очередь отличаются от ключей для musicians). JSON полностью динамичен и позволяет изменять способ представления данных прямо внутри JSON-структуры."
    }, {
        "firstName": "Isaac",
        "lastName": "Asimov",
        "genre": "science fiction",
        "text": "После того как мы разобрались с форматом, его можно легко использовать в JavaScript-коде. JSON – это родной формат для JavaScript. Это значит, что для работы с JSON-данными в JavaScript нам не нужен какой-нибудь специальный инструментарий (toolkit) или API."
    }, {
        "firstName": "Tad",
        "lastName": "Williams",
        "genre": "fantasy",
        "text": "Здесь нет ничего сложного; переменная people содержит те же самые JSON-отформатированные данные, что мы уже видели. Однако данный пример пока почти бесполезен, так как удобство использования JSON-формата ещё не очевидно."
    }, {
        "firstName": "Frank",
        "lastName": "Peretti",
        "genre": "christian fiction",
        "text": "Хотя это может показаться неочевидным, но эта длинная строка сверху – обычный массив, и если вы когда-нибудь работали с массивами в JavaScript, то сможете легко получить доступ к данным. Фактически компоненты имени массива можно разделить просто точками. Так, для доступа к фамилии (lastname) первого элемента в списке программистов (programmers) в JavaScript-программе можно использовать такой код"
    }, {
        "firstName": "Eric",
        "lastName": "Clapton",
        "instrument": "guitar",
        "text": "Заметьте, что индексация массива начинается с нуля. Доступ к искомому полю данных осуществляется примерно так: мы начинаем с people; затем движемся к элементу programmers и указываем, что нас интересует первая запись; наконец, мы получаем доступ к значению по ключу lastName. В результате мы получаем строку \"McLaughlin\"."
    }, {
        "firstName": "Sergei",
        "lastName": "Rachmaninoff",
        "instrument": "piano",
        "text": "Вероятно, ещё более важно, что мы можем конвертировать любой JavaScript-объект в JSON-отформатированный текст. То есть работать таким образом можно не только с теми переменными, которым изначально были присвоены JSON-отформатированные данные. Для преобразования, например, объекта myObject в JSON-строку надо выполнить такую же команду:"
    }
]